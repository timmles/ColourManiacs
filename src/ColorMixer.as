package  {		public class ColorMixer {		private static const lvl:Array = 	  [3, 3, 6];		private static const lvlShift:Array = [0, 3, 6];				public static function initRandomColor(level:int) {			var rndcolor:int = getRandom(lvl[level-1]) + lvlShift[level-1];						switch(rndcolor) {				//primary				case 1:					return new ComplexColor("red",	 ColorSpectrum.RED,		[1, 0, 0]);				break;				case 2:					return new ComplexColor("blue", 	 ColorSpectrum.BLUE,	[0, 1, 0]);				break;				case 3:					return new ComplexColor("yellow", ColorSpectrum.YELLOW,	[0, 0, 1]);				break;								//secondary				case 4: 					return new ComplexColor("orange", ColorSpectrum.ORANGE, [1, 0, 1]);				break;				case 5:					return new ComplexColor("green",	 ColorSpectrum.GREEN,  [0, 1, 1]);				break;				case 6:					return new ComplexColor("violet", ColorSpectrum.VIOLET, [1, 1, 0]);				break;				//tertiary				case 7: 					return new ComplexColor("red-orange", 	ColorSpectrum.RED_ORANGE, 		[2, 0, 1]);				break;				case 8: 					return new ComplexColor("yellow-orange", ColorSpectrum.YELLOW_ORANGE,	[1, 0, 2]);				break;				case 9:					return new ComplexColor("yellow-green",	ColorSpectrum.YELLOW_GREEN,		[0, 1, 2]);				break;				case 10:					return new ComplexColor("blue-green", 	ColorSpectrum.BLUE_GREEN,		[0, 2, 1]);				break;				case 11:					return new ComplexColor("blue-violet", 	ColorSpectrum.BLUE_VIOLET,		[1, 2, 0]);				break;				case 12:					return new ComplexColor("red-violet",	ColorSpectrum.RED_VIOLET,		[2, 1, 0]);				break;				default:					trace("no acceptable level assigned");					return new ComplexColor("black",	ColorSpectrum.BLACK, [0, 0, 0]);			}		}				static function getRandom(limit:int):int {			return Math.round(Math.random()*(limit-1));		}	}	}